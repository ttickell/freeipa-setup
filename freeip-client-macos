#!/bin/zsh

ORG_CA_ROOT=""
REALM="HOME.TICKELL.US"
DOMAIN="home.tickell.us"
BASE=$(echo "dc=${DOMAIN}" | sed -e 's/\./,dc=/g')
echo $BASE

[ -z "$ADMIN" ] && ADMIN="admin@$REALM"
file=$(mktemp)

# Check Creds
test=$(klist -t)
test=$?
if [ "$test" -eq 0 ]; then
	test=$(klist | grep Principal: | awk -F": " '{print $2}')
fi
if [ "$test" != "$ADMIN" ]; then
	echo "You do not appear to have a ticket as $ADMIN - let's kinit"
	kinit $ADMIN
	test=$?
	if [ "$test" -gt 0 ]; then
		echo "Kinit failed.  Try again."
		exit
	fi
fi

## Add Org CA Trust
echo "Adding your CA to the System Trust Store"
echo
echo "********    You will get prompted to authorize the security change! *********"
echo 
if [ -z "${ORG_CA_ROOT}" ]; then
	cat > ${file} << END
-----BEGIN CERTIFICATE-----
MIICizCCAe2gAwIBAgIUU0jAFYRCBir4np1dJ6x/IfmcsX0wCgYIKoZIzj0EAwQw
LTErMCkGA1UEAwwidGlja2VsbCB7ZG90fSB1cyBSb290IG9mIGFsbCBUcnVzdDAe
Fw0yNDA0MDYwMTM2MjRaFw0zNDA0MDQwMTM2MjRaMC0xKzApBgNVBAMMInRpY2tl
bGwge2RvdH0gdXMgUm9vdCBvZiBhbGwgVHJ1c3QwgZswEAYHKoZIzj0CAQYFK4EE
ACMDgYYABAEdCnLCA0gwEm23Ua+YdEnGrkBVo62JDIB0ce3S4uJxTMt88EcCtNj3
xeXOQApKrjXNm1YUAVddAVO319CS+bEx8AAS94h+KghJAuwae6X7gOAGxABO3eza
70B0Jww9aJOj2T0gROO9DZf7yodk2eP3LfUm7XmOCL0yS53AtMsodNVvy6OBpzCB
pDAMBgNVHRMEBTADAQH/MB0GA1UdDgQWBBRE2noj3ZAagpikK3a6QfNnfwwVuDBo
BgNVHSMEYTBfgBRE2noj3ZAagpikK3a6QfNnfwwVuKExpC8wLTErMCkGA1UEAwwi
dGlja2VsbCB7ZG90fSB1cyBSb290IG9mIGFsbCBUcnVzdIIUU0jAFYRCBir4np1d
J6x/IfmcsX0wCwYDVR0PBAQDAgEGMAoGCCqGSM49BAMEA4GLADCBhwJBP7l/1tqv
xWKRWITP442AC249Zvo6qelUimryLRfrjrU2AJ5OfChxxJ0RAJDC2qI/qJt5z6HL
M2boEYoy70QYhFsCQgDvmxHk89OAVUwrHtp6+mglMG59L16yYHhCqGDCCPDXFE/3
E8FoSiasbUI7A3xI4glvKbho+jnoIKBlM5ALbMSk7A==
-----END CERTIFICATE-----
END
	ORG_CA_ROOT=${file}	
fi

sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" -p ssl -p smime -p codeSign -p IPSec -p basic -p swUpdate -p pkgSign -p eap  -p macappstore -p appleID -p timestamping ${ORG_CA_ROOT} 

echo "Getting FreeIPA CA Cert"
curl -kL http://ipa-ca.${DOMAIN}/ipa/config/ca.crt > ${file} 2>/dev/null
sudo mkdir -p /etc/ipa
sudo cp ${file} /etc/ipa/ca.crt
sudo chmod 755 /etc/ipa
sudo chmod 644 /etc/ipa/ca.crt



echo "Create /etc/krb5.conf"
cat > $file << END
[oomain_realm]
	.${DOMAIN} = ${REALM}
	${DOMAIN} = ${REALM}

[libdefaults]
	default_realm = ${REALM}
	allow_weak_cryto = yes
	dns_lookup_realm = true
	dns_lookup_kdc = true
	rdns = false
	ticket_lifetime = 24h
	forwardable = yes
	renewable = true

[realms]
	${REALM} = {
		pkinit_anchors = FILE:/etc/ipa/ca.crt
	}
END

if [ ! -f "/etc/krb5.conf.install" -a -f "/etc/krb5.conf" ]; then
	cp /etc/krb5.conf /etc/krb5.conf.install
fi

if [ -f "/etc/krb5.conf" ]; then
	if [ ! -f /etc/krb5.conf.install ]; then
		sudo cp /etc/krb5.conf /etc/krb5.conf.install
	fi
	sudo cp /etc/krb5.conf /etc/krb5.conf.orig
fi
sudo cp ${file} /etc/krb5.conf
sudo chmod 644 /etc/krb5.conf

# update PAM setup
cat > ${file} << END
# authorization: auth account
auth	optional	pam_krb5.so use_first_pass use_kcminit default_principal
auth	sufficient	pam_krb5.so use_first_pass default_principal
auth	required	pam_opendirectory.so use_first_pass nullok
account	required	pam_opendirectory.so
END
if [ ! -f /etc/pam.d/authorization.install ]; then
	sudo cp /etc/pam.d/authorization /etc/pam.d/authorization.install
fi
sudo cp /etc/pam.d/authorization /etc/pam.d/authorization.orig
sudo cp ${file} /etc/pam.d/authorization
sudo chmod 644 /etc/pam.d/authorization

cat > ${file} << END
auth       optional       pam_krb5.so use_first_pass use_kcminit
auth       optional       pam_krb5.so use_first_pass use_kcminit default_principal
auth       sufficient     pam_krb5.so use_first_pass default_principal
auth       required       pam_opendirectory.so use_first_pass nullok
account    required       pam_opendirectory.so
account    sufficient     pam_self.so
account    required       pam_group.so no_warn group=admin,wheel fail_safe
account    required       pam_group.so no_warn deny group=admin,wheel ruser fail_safe
END
if [ ! -f /etc/pam.d/screensaver.install ]; then
        sudo cp /etc/pam.d/screensaver /etc/pam.d/screensaver.install
fi
sudo cp /etc/pam.d/screensaver /etc/pam.d/screensaver.orig
sudo cp ${file} /etc/pam.d/screensaver
sudo chmod 644 /etc/pam.d/screensaver

cat > ${file} << END
password   sufficient     pam_krb5.so
auth       required       pam_permit.so
account    required       pam_opendirectory.so
password   required       pam_opendirectory.so
session    required       pam_permit.so
END
if [ ! -f /etc/pam.d/passwd.install ]; then
        sudo cp /etc/pam.d/passwd /etc/pam.d/passwd.install
fi
sudo cp /etc/pam.d/passwd /etc/pam.d/passwd.orig
sudo cp ${file} /etc/pam.d/passwd
sudo chmod 644 /etc/pam.d/passwd

# update ssh client config
echo "Update SSH client Configuration"
if [ ! -f "/etc/ssh/ssh_config.install" ]; then
	sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config.install
fi
cat /etc/ssh/ssh_config | sed -e '/GSSAPI/s/\# *//;/GSSAPI/s/ no/ yes/' > ${file}
echo "VerifyHostKeyDNS yes" >> ${file}
sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config.orig
sudo cp ${file} /etc/ssh/ssh_config
sudo chmod 644 /etc/ssh/ssh_config

# Checking (and setting if needed) hostname
echo "Checking / Setting hostname"
set_name=0
current_hostname=$(scutil --get HostName)
test=$?
if [ "$test" -gt 0 ]; then
	echo "Error: Name not set"
	set_name=1
fi
test=$(echo $current_hostname | grep $DOMAIN)
test=$?
if [ "$test" -eq 1 ]; then
	echo "Error: Name set but does not include $DOMAIN"
	set_name=1
else
	HOSTNAME=$current_hostname
fi

if [ $set_name -eq 1 ]; then
	echo "Hostname not set - Looking for ENV var HOSTNAME or input"
	echo "In outer if"
	while [ 1 ]; do
		if [ ! -z "$HOSTNAME" ]; then
			test=$(echo $HOSTNAME | grep $DOMAIN)
			test=$?
			if [ "$test" -eq 0 ]; then
				break
			else
				echo "Entered hostname does not include $DOMAIN - try again."
			fi
		fi
		echo -n "Enter fully qualified Hostname: "
		read HOSTNAME
	done
	echo "Setting hostname to \"$HOSTNAME\""
	sudo scutil --set HostName "$HOSTNAME"
fi

## get current ip address
for int in $(ipconfig getiflist); do
	addr=$(ipconfig getifaddr $int)
	if [ ! -z "$addr" ]; then 
		mac=$(ifconfig $int | grep ether | sed -e 's/^.*ether //')
		break
	fi
done
if [ -z "$addr" ]; then
	echo "IP Address Could not be determined. Check host configuration.  Exit"
	exit
else 
	echo "adding host with $HOSTNAME -> $addr"
fi

server=$(dig _kerberos-master._tcp.${DOMAIN}. SRV +short | head -1 | awk '{print $4}')

echo "Accessing $server over SSH to setup client"
user=$(echo $ADMIN | awk -F\@ '{print $1}')
short_hostname=$(hostname -s)

#ssh ${user}@${server} \
#"ipa dnsrecord-add ${DOMAIN} ${short_hostname} --a-ip-addres=${addr} 2>&1 > /tmp/${short_hostname}_enroll.log
#ipa host-add ${HOSTNAME} --macaddress=${mac} 2>&1 >> /tmp/${short_hostname}_enroll.log
#mkdir -p enrolled_keytabs 2>&1 >> /tmp/${short_hostname}_enroll.log
#ipa-getkeytab -p host/hbc384-citra.home.tickell.us -k enrolled_keytabs/${short_hostname}.keytab 2>&1 >> /tmp/${short_hostname}_enroll.log
#cat enrolled_keytabs/${short_hostname}.keytab" > ${file}
#sudo cp -f ${file} /etc/krb5.keytab
#sudo chmod 640 /etc/krb5.keytab
#sudo chown root:_keytabusers /etc/krb5.keytab


# setup login
if [ ! -f "/Library/Preferences/com.apple.loginwindow.plist.install" ]; then
	sudo cp -f /Library/Preferences/com.apple.loginwindow.plist /Library/Preferences/com.apple.loginwindow.plist.install
fi
#/usr/libexec/PlistBuddy -c print /Library/Preferences/com.apple.loginwindow.plist
sudo /usr/libexec/PlistBuddy -c 'Add:SHOWFULLNAME bool' /Library/Preferences/com.apple.loginwindow.plist
sudo /usr/libexec/PlistBuddy -c 'Set:SHOWFULLNAME true' /Library/Preferences/com.apple.loginwindow.plist
#/usr/libexec/PlistBuddy -c print /Library/Preferences/com.apple.loginwindow.plist

# Setting Mapping Template
cp FreeIPA.plist ~/Library/Application\ Support/Directory\ Access/LDAPv3/Templates/FreeIPA.plist
echo "NOTE: You now must set the ldap servers and mappings in Directory Access."
echo "Return here and type 'complete' when you are done."
open "/System/Library/CoreServices/Applications/Directory Utility.app"
read foo

echo "Resuming and setting up Mobile Accounts for listed Users"
server=$(dig _kerberos-master._tcp.${DOMAIN}. SRV +short | head -1 | awk '{print $4}' | sed -e 's/\.$//')
for user in $(dscl /LDAPv3/${server} list Users); do
	echo " -- Working on $user"
	if [ -d "/Users/${user}" ]; then
		echo " -- ${user} already a mobile user or existing local user - migrate by hand."
	else 
		sudo /System/Library/CoreServices/ManagedClient.app/Contents/Resources/createmobileaccount -n ${user}
	
	fi
done	


